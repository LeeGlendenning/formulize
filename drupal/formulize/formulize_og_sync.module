<?php
// $Id$

/** 
 * Project:     Formulize: data management rapid application development
 * File:        formulize_og_sync.module 
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 * 
 */ 

/**
 * @file
 * Syncs Organic Groups with Formulize formulize groups.
 */


/**
 * Implementation of hook_help().
 *
 * Throughout Drupal, hook_help() is used to display help text at the top of
 * pages.
 */
function formulize_og_sync_help($section)
{	
    switch ($section) {
    case 'admin/help#formulize_og_sync':
      $output = '<p>'. t('The Formulize OG Sync module ensures synchronization of groups/roles between Drupal and Formulize.') .'</p>';
      $output .= '<p>'. t('For more information please refer to the <a href="!1">Formulize web-site</a> which includes project information, documentation and support resources and more.', array('!1' => 'http://freeformsolutions.ca/en/formulize')) .'</p>';
      return $output;
     case 'admin/modules#description':
         // This description is shown in the listing at admin/modules.
         return t('The Formulize OG Sync module integrates with Formulize and lets you create nodes in your Drupal website that are based on screens defined in Formulize. This module also ensures synchronization of the users and groups/roles between Drupal and Formulize.', array('!1' => '2.0', '!2' => 'http://freeformsolutions.ca/en/formulize/'));
    }
}

/**
 * Valid permissions for this module
 * @return array An array of valid permissions for the formulize module
 */
function formulize_og_sync_perm() {
  return array('administer formulize OG groups');
} 

function formulize_og_sync_menu() {
  $items = array();

  // Admin Settings.
  $items['admin/settings/formulize_og_sync'] = array(
    'title' => 'Formulize Organic Group Sync',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('formulize_og_sync_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer formulize OG groups'),
    'description' => 'Global configuration of Formulize OG Sync functionality.',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}  

/**
 * Implementation of hook_nodeapi().
 *
 * Listen for changes to OG
 * hook_nodeapi().
 */
function formulize_og_sync_nodeapi(&$node, $op, $teaser, $page) {

	// only run if OG is enabled
  // check if the node if of type og
  if ( ! og_is_group_type( $node->type ) ) {
      return;
  }

		switch ($op) {
		case 'insert': // $node object should be available
			// get nid and create Fz group if one with same id doesn't already exist
			drupal_set_message(t('A corresponding Fz group has been created'));
			break;
		case 'update':
			break;
		case 'delete':
			break;
    case 'delete revision':
      break;
  	}
}

/**
 * Implemenation of hook_enable. Called every time module is enabled. Use to synchronise with pre-existing groups
 * @return 
 */
function formulize_og_sync_enable() 
{
    if ( ! formulize_exist( ) ) {
        return;
    }
    
    // get OG content types
    $og_types_str = implode("', '", og_get_types('group'));
    //build the query
    $results = db_query("SELECT n.nid FROM {node} n WHERE n.type IN ('%s')", $og_types_str);
    
    while ($result = db_fetch_array($results)) {
        $node = node_load(array('nid' => $result['nid']));
        
        $title  = trim( $node->title );
        $params = array( 'name'        => $title,
                         'title'       => $title,
                         'description' => trim( $node->og_description ),
                         'is_active'   => 1,
                         'og_id'       => $node->nid );
        
        // add the group
				// create a Formulize group for each existing OG group
        
        // add the subscribers
        $subscribers = db_query(og_list_users_sql(1), $node->nid);
        while ($subscriber = db_fetch_array($subscribers)) {
            $uid = $subscriber['uid'];
            $is_admin = $subscriber['is_admin'];
						// add user to the Formulize group if they are part of OG group
						// Example:  civicrm_og_sync_og( 'user update', $node->nid, $uid, array( 'is_admin' => $is_admin, 'is_active' => 1 ) );
        }
    }
}
