<?php
// $Id$

/** 
 * Project:     Formulize: data management rapid application development
 * File:        formulize.module 
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 * 
 */ 

/**
 * @file
 * Allows users to access to Formulize through Drupal installations.
 */


//require_once(drupal_get_path('module', 'formulize') .'/formulize_base.inc');


/**
 * Implementation of hook_help().
 *
 * Throughout Drupal, hook_help() is used to display help text at the top of
 * pages.
 */
function formulize_help($section)
{	
    switch ($section) {
    case 'admin/help#formulize':
      $output = '<p>'. t('The Formulize module integrates with Formulize and lets you create nodes in your Drupal website that are based on screens defined in Formulize. This module also ensures synchronization of the users and groups/roles between Drupal and Formulize.') .'</p>';
      $output .= '<p>' . t('Behaviours this module supports:') . '</p>';
      $output .= '<ul>';
			$output .= '<li>' . t('Storing data about where Formulize is, how to connect to its database, etc') . '</li>';
			$output .= '<li>' . t('Creating new users in Formulize when new users are created in Drupal') . '</li>';
			$output .= '<li>' . t('Updating users in Formulize when users are updated in Drupal (ie: name change, etc)') . '</li>';
			$output .= '<li>' . t('Deleting users in Formulize when users are deleted in Drupal') . '</li>';
			$output .= '<li>' . t('Creating new groups in Formulize when roles are created in Drupal') . '</li>';
			$output .= '<li>' . t('Updating groups in Formulize when roles are updated in Drupal') . '</li>';
			$output .= '<li>' . t('Deleting groups in Formulize when roles are deleted in Drupal') . '</li>';
			$output .= '<li>' . t('Creating new groups in Formulize when groups are created in Organic Groups, including groups for each role created within a group') . '</li>';
			$output .= '<li>' . t('Updating groups in Formulize when groups are updated in Organic Groups, including groups for each role created within a group') . '</li>';
			$output .= '<li>' . t('Deleting groups in Formulize when groups are deleted in Organic Groups, including groups for each role created within a group.') . '</li>';
      $output .= '</ul>';
      $output .= '<p>'. t('For more information please refer to the <a href="!1">Formulize web-site</a> which includes project information, documentation and support resources and more.', array('!1' => 'http://freeformsolutions.ca/formulize')) .'</p>';
      return $output;
     case 'admin/modules#description':
         // This description is shown in the listing at admin/modules.
         return t('The Formulize module (Formulize !1) integrates with Formulize and lets you create nodes in your Drupal website that are based on screens defined in <a href="!2">Formulize</a>. This module also ensures synchronization of the users and groups/roles between Drupal and Formulize.', array('!1' => '1.0', '!2' => 'http://freeformsolutions.ca/en/formulize/'));
    }
}

/**
 * Implementation of hook_perm()
 * @return array An array of valid permissions for the formulize module
 */
function formulize_perm() {
  return array('create formulize content', 'edit own formulize content', 'edit formulize content', 'access formulize content', 'delete formulize content', 'administer formulize configuration');
} 

/**
 * Implementation of hook_access()
 */
function formulize_access($op, $node, $account) {
	switch ($op) {
		case 'create' :
			return user_access('create formulize content', $account);
		case 'update' :
			return user_access('edit formulize content', $account);
		case 'delete' :
			return user_access('delete formulize content', $account);
	}
}

/**
 * Implementation of hook_menu().
 */

function formulize_menu() {
  $items = array();

  // Admin Settings.
  $items['admin/settings/formulize'] = array(
    'title' => 'Formulize Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('formulize_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'description' => 'Global configuration of Formulize functionality.',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Menu callback for admin/formulize/settings.
 */
function formulize_admin_settings() {
	
	  $form['formulize'] = array(
    '#type' => 'fieldset',
    '#title' => t('Formulize Connection'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['formulize']['formulize_full_path']  = array(
    '#type' => 'textfield',
    '#title' => t('Formulize full path'),
    '#default_value' => variable_get('formulize_full_path', NULL),
    '#description' => t('The full path to the mainfile.php file of your Formulize installation. For instance, "/var/www/mysite.com/formulize/mainfile.php"'),
  );
	$form['formulize']['formulize_db_prefix']  = array(
    '#type' => 'textfield',
    '#title' => t('Formulize database prefix'),
    '#default_value' => variable_get('formulize_db_prefix', NULL),
    '#description' => t('The prefix used for all the table names in the Formulize database (e.g. xoops_ or formulize_).'),
  );

	$form = system_settings_form($form);
	
	return $form;
}


/**
 * Implementation of hook_node_info()
 * Defines the Formulize node type so that Drupal knows that such a node type exists and will let people create nodes of that type
 */
function formulize_node_info() {
  return array(
    'formulize' => array(
      'name' => t('Formulize screen'),
      'module' => 'formulize',
      'description' => t('Formulize is a data management and reporting toolkit.  You can embed data management applications inside Drupal, once you have configured them in Formulize.  See the admin area for more information.'),
			'has_title' => TRUE,
			'title_label' => ('Screen Name'),
			'has_body' => TRUE,
			'body_label' => t('Description'),
    )
  );
}

/**
 * Implementation of hook_form()
 * Defines the custom fields for the editing form for the Formulize node type
 */
function formulize_form(&$node) {
  $type = node_get_types('type', $node);
	
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#weight' => -5,
    '#description' => t('This name will not be shown to users, but will show up in lists of nodes so you can find this node easily.')
  );
  $form['screen_id'] = array(
    '#type' => 'select',
    '#title' => t('Select the Formulize screen that you want to embed in this node'),
    '#required' => TRUE,
    '#default_value' => isset($node->screen_id) ? $node->screen_id : '',
    '#weight' => -4,
    '#options' => _formulize_get_screens()
  );

  return $form;
}

function _formulize_get_screens () {

	$db_prefix_formulize = variable_get('formulize_db_prefix', NULL);
	//This presumes there needs to be an underscore? $db_prefix_formulize = substr($db_prefix_formulize, -1) == "_" ? $db_prefix_formulize : $db_prefix_formulize . "_"; // if there's no underscore at the end of the prefix, add one in

	//Switch to formulize database
	db_set_active('formulize');

	$result = db_query('SELECT 
		fi.desc_form, 
		fs.title, 
		fs.sid 
		FROM ' . $db_prefix_formulize . 'formulize_id as fi, 
		' . $db_prefix_formulize . 'formulize_screen as fs 
		WHERE fi.id_form = fs.fid 
		ORDER BY fi.desc_form, fs.title');

	//Switch back to the default connection when finished.
	db_set_active('default');

	$options = array();

	while($row = db_fetch_object($result)) {
		$options[$row->sid] = $row->desc_form . ' - ' . $row->title;
	}

	if(count($options) == 0) {
		$options[0] = t('No Formulize Screens Found');		
	}
	return $options;

}

function formulize_admin() {
  //$form = array();
  //$form['formulize_screen']
}

/**
 * Implementation of hook_validate().
 *
 * Our "quantity" field requires a number to be entered. This hook lets
 * us ensure that the user entered an appropriate value before we try
 * inserting anything into the database.
 *
 * Errors should be signaled with form_set_error().
 */
/*
function formulize_validate(&$node) {
  if ($node->screen_id) {
    if (!is_numeric($node->screen_id)) {
      form_set_error('screen_id', t('The screen id must be a number.'));
    }
  }
  else {
    // Let an empty field mean "zero."
    $node->quantity = 0;
  }
}
*/

/**
 * Implementation of hook_insert().
 *
 * As a new node is being inserted into the database, we need to do our own
 * database inserts.
 */
function formulize_insert($node) {
  db_query("INSERT INTO {formulize} (vid, nid, screen_id) VALUES (%d, %d, %d)", $node->vid, $node->nid, $node->screen_id);
}

/**
 * Implementation of hook_update().
 *
 * As an existing node is being updated in the database, we need to do our own
 * database updates.
 */
function formulize_update($node) {
  // if this is a new node or we're adding a new revision,
  if ($node->revision) {
    formulize_insert($node);
  }
  else {
    db_query("UPDATE {formulize} SET screen_id = %d WHERE vid = %d", $node->screen_id, $node->vid);
  }
}

/**
 * Implementation of hook_nodeapi().
 *
 * When a node revision is deleted, we need to remove the corresponding record
 * from our table. The only way to handle revision deletion is by implementing
 * hook_nodeapi().
 */
function formulize_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    case 'delete revision':
      // Notice that we're matching a single revision based on the node's vid.
      db_query('DELETE FROM {formulize} WHERE vid = %d', $node->vid);
      break;
  }
}

/**
 * Implementation of hook_delete().
 *
 * When a node is deleted, we need to remove all related records from out table.
 */
function formulize_delete($node) {
  // Notice that we're matching all revision, by using the node's nid.
  db_query('DELETE FROM {formulize} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_load().
 *
 * Now that we've defined how to manage the node data in the database, we
 * need to tell Drupal how to get the node back out. This hook is called
 * every time a node is loaded, and allows us to do some loading of our own.
 */
function formulize_load($node) {
  $additions = db_fetch_object(db_query('SELECT screen_id FROM {formulize} WHERE vid = %d', $node->vid));
  return $additions;
}

/**
 * Implementation of hook_view().
 *
 * This is a typical implementation that simply runs the node text through
 * the output filters.
 */
/*
function formulize_view($node, $teaser = FALSE, $page = FALSE) {
  $node = node_prepare($node, $teaser);
  $node->content['myfield'] = array(
    '#value' => theme('formulize_order_info', $node),
    '#weight' => 1,
  );

  return $node;
}
*/

function formulize_view($node, $teaser = FALSE, $page = FALSE) {
  $node = node_prepare($node, $teaser);
	
	$formulize_path = variable_get('formulize_full_path', NULL);
	//$lastChar = substr($rootPath, -1);
	//if($lastChar != "\\" AND $lastChar != "/") {
	//	$rootPath .= strstr($rootPath, "/") ? "/" : "\\"; // add the right kind of slash to the end of the path if it has no trailing slash
	//}
  //require_once $formulize_path;
	
	// NEED TO ASSIGN THE SCREEN ID FROM THE NODE PROPERTIES, DOESN'T SEEM TO BE IN THE NODE OBJECT BY DEFAULT, SO WE HAVE TO BUILD OR PREPARE THE NODE BEFORE THIS POINT TO ADD IN OUR OWN PROPERTIES?
  //$formulize_screen_id = 1;
	// UNCOMMENT THE NEXT LINE AFTER WE'VE GOT THE RIGHT SCREEN ID BEING ASSIGNED FROM THE NODE PROPERTIES
  //include XOOPS_ROOT_PATH . "/modules/formulize/index.php"; 
// ob_start();
  //$form_contents = ob_get_clean();
	
  //$node = node_prepare($node, $teaser);
  $node->content['body'] = array(
    '#value' => theme('formulize_screen', $form_contents),
    '#weight' => 1,
  );

  return $node;
  
}

/**
 * Implementation of hook_theme().
 *
 * This lets us tell Drupal about our theme functions and their arguments.
 */
function formulize_theme() {
  return array(
    'formulize_screen' => array(
      'arguments' => array('node'),
    ),
  );
}

/**
 * A custom theme function.
 *
 * By using this function to format our node-specific information, themes
 * can override this presentation if they wish. We also wrap the default
 * presentation in a CSS class that is prefixed by the module name. This
 * way, style sheets can modify the output without requiring theme code.
 */
function theme_formulize_screen($node) {
  $output = '<div class="formulize_screen">';
  $output .= $form_contents;
  $output .= '</div>';
  return $output;
}
