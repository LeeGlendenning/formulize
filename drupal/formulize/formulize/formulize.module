<?php
// $Id$

/** 
 * Project:     Formulize: data management rapid application development
 * File:        formulize.module 
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 * 
 */ 

/**
 * @file
 * Allows users to access to Formulize through Drupal installations.
 */


/**
 * Internal function to establish a connection to the Formulize database
 *
 * This function will establish the connection to the Formulize database only once, and return that resource every time it's requested.
 * This function should always be called as follows, to ensure the output is assigned by reference, slightly optimize memory usage in case multiple connections are requested in a single page load:
 * $formulizeDBConnection =& _formulize_get_db_connection();
 * Then after that, this connection should be specifically included in mysql function calls, ie:
 * $result = mysql_query($sql, $formulizeDBConnection);
 * This ensures we completely leave the Drupal database connection alone, and don't interfere with Formulize's own internal DB connection either.
 */
function _formulize_get_db_connection() {
		static $formulize_db_connection;
		if(!isset($formulize_db_connection)) {
			$formulize_db_connection = mysql_connect(variable_get('formulize_db_host', NULL), variable_get('formulize_db_user', NULL), variable_get('formulize_db_pass', NULL), TRUE);
			mysql_selectdb(variable_get('formulize_db_name', NULL), $formulize_db_connection);
		}
		return $formulize_db_connection;
}


/**
 * Implementation of hook_help().
 *
 * Throughout Drupal, hook_help() is used to display help text at the top of
 * pages.
 */
function formulize_help($section)
{	
    switch ($section) {
    case 'admin/help#formulize':
      $output = '<p>'. t('The Formulize module integrates with Formulize and lets you create nodes in your Drupal website that are based on screens defined in Formulize. This module also ensures synchronization of the users and groups/roles between Drupal and Formulize.') .'</p>';
      $output .= '<p>' . t('Behaviours this module supports:') . '</p>';
      $output .= '<ul>';
			$output .= '<li>' . t('Storing data about where Formulize is, how to connect to its database, etc') . '</li>';
			$output .= '<li>' . t('Creating new users in Formulize when new users are created in Drupal') . '</li>';
			$output .= '<li>' . t('Updating users in Formulize when users are updated in Drupal (ie: name change, etc)') . '</li>';
			$output .= '<li>' . t('Deleting users in Formulize when users are deleted in Drupal') . '</li>';
			$output .= '<li>' . t('Creating new groups in Formulize when roles are created in Drupal') . '</li>';
			$output .= '<li>' . t('Updating groups in Formulize when roles are updated in Drupal') . '</li>';
			$output .= '<li>' . t('Deleting groups in Formulize when roles are deleted in Drupal') . '</li>';
			$output .= '<li>' . t('Creating new groups in Formulize when groups are created in Organic Groups, including groups for each role created within a group') . '</li>';
			$output .= '<li>' . t('Updating groups in Formulize when groups are updated in Organic Groups, including groups for each role created within a group') . '</li>';
			$output .= '<li>' . t('Deleting groups in Formulize when groups are deleted in Organic Groups, including groups for each role created within a group.') . '</li>';
      $output .= '</ul>';
      $output .= '<p>'. t('For more information please refer to the <a href="!1">Formulize web-site</a> which includes project information, documentation and support resources and more.', array('!1' => 'http://freeformsolutions.ca/formulize')) .'</p>';
      return $output;
     case 'admin/modules#description':
         // This description is shown in the listing at admin/modules.
         return t('The Formulize module (Formulize !1) integrates with Formulize and lets you create nodes in your Drupal website that are based on screens defined in <a href="!2">Formulize</a>. This module also ensures synchronization of the users and groups/roles between Drupal and Formulize.', array('!1' => '1.0', '!2' => 'http://freeformsolutions.ca/en/formulize/'));
    }
}

/**
 * Implementation of hook_perm()
 * @return array An array of valid permissions for the formulize module
 */
function formulize_perm() {
  return array('create formulize forms', 'edit own formulize forms', 'edit formulize forms', 'access formulize content', 'administer formulize configuration');
} 

/**
 * Implementation of hook_menu().
 */

function formulize_menu() {
  $items = array();

  // Admin Settings.
  $items['admin/settings/formulize'] = array(
    'title' => 'Formulize Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('formulize_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'description' => 'Global configuration of Formulize functionality.',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Menu callback for admin/formulize/settings.
 */
function formulize_admin_settings() {
	
	  $form['formulize'] = array(
    '#type' => 'fieldset',
    '#title' => t('Formulize Connection'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['formulize']['formulize_full_path']  = array(
    '#type' => 'textfield',
    '#title' => t('Formulize full path'),
    '#default_value' => variable_get('formulize_full_path', NULL),
    '#description' => t('The full path to the root of your Formulize installation. For instance, "/var/www/mysite.com/formulize/"'),
  );
	$defaultHost = variable_get('formulize_db_host', NULL);
	if(!$defaultHost) { $defaultHost = 'localhost'; }
	$form['formulize']['formulize_db_host']  = array(
    '#type' => 'textfield',
    '#title' => t('Formulize database host'),
    '#default_value' => $defaultHost,
    '#description' => t('The name of the host where the Formulize database is located.  If in doubt, try "localhost"'),
  );
	$form['formulize']['formulize_db_name']  = array(
    '#type' => 'textfield',
    '#title' => t('Formulize database name'),
    '#default_value' => variable_get('formulize_db_name', NULL),
    '#description' => t('The name of the database where the Formulize keeps its information.'),
  );
	$form['formulize']['formulize_db_user']  = array(
    '#type' => 'textfield',
    '#title' => t('Formulize database user'),
    '#default_value' => variable_get('formulize_db_user', NULL),
    '#description' => t('The username for accessing the Formulize database.'),
  );
	$form['formulize']['formulize_db_pass']  = array(
    '#type' => 'textfield',
    '#title' => t('Formulize database password'),
    '#default_value' => variable_get('formulize_db_pass', NULL),
    '#description' => t('The password for accessing the Formulize database.'),
  );
	$form['formulize']['formulize_db_prefix']  = array(
    '#type' => 'textfield',
    '#title' => t('Formulize database prefix'),
    '#default_value' => variable_get('formulize_db_prefix', NULL),
    '#description' => t('The prefix used for all the table names in the Formulize database.'),
  );
	
	$form = system_settings_form($form);
	
	return $form;
}


/**
 * Implementation of hook_node_info()
 * Defines the Formulize node type so that Drupal knows that such a node type exists and will let people create nodes of that type
 */
function formulize_node_info() {
  return array(
    'formulize' => array(
      'name' => t('Formulize screen'),
      'module' => 'formulize',
      'description' => t('Formulize is a data management and reporting toolkit.  You can embed data management applications inside Drupal, once you have configured them in Formulize.  See the admin area for more information.'),
			'has_title' => TRUE,
			'title_label' => ('Screen Name'),
			'has_body' => TRUE,
			'body_label' => t('Description'),
    )
  );
}

/**
 * Implementation of hook_form()
 * Defines the custom fields for the editing form for the Formulize node type
 */
function formulize_form(&$node) {
  $type = node_get_types('type', $node);
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#weight' => -5,
    '#description' => t('This name will not be shown to users, but will show up in lists of nodes so you can find this node easily.')
  );
	
	// gather the available screens from Formulize, stick them in an $options array
	$formulizeDBConnection =& _formulize_get_db_connection(); // assign by reference (ie: =& )
	$dbPrefix = variable_get('formulize_db_prefix', NULL);
	$dbPrefix = substr($dbPrefix, -1) == "_" ? $dbPrefix : $dbPrefix."_"; // if there's no underscore at the end of the prefix, add one in
	$sql = "SELECT t1.desc_form, t2.title, t2.sid FROM ".$dbPrefix."formulize_id as t1, ".$dbPrefix."formulize_screen as t2 WHERE t1.id_form = t2.fid ORDER BY t1.desc_form, t2.title";
	$options = array();
	if($res = mysql_query($sql, $formulizeDBConnection)) {
		while($array = mysql_fetch_array($res)) {
				$options[$array['sid']] = $array['desc_form'] . " - " . $array['title'];
		}
	} else {
		// we should do whatever Drupal does when an error needs to be thrown...not 100% necessary for the first pass
	}
	if(count($options) == 0) {
		$options[0] = t('No Formulize Screens Found');		
	}
	
	// DO WE NEED TO HAVE A PLACE IN THE DATABASE TO STICK THIS?  OUR OWN DATABASE TABLE CREATED ON INSTALL OF THE MODULE?
	// for example, not sure if the $node->formulize_screen_id is the right way to refer to the default value, let alone how we get this value elsewhere (in the formulize_view function)
  $form['formulize_screen_id'] = array(
    '#type' => 'select',
    '#title' => t('Select the Formulize screen that you want to embed in this node'),
    '#required' => TRUE,
    '#default_value' => $node->formulize_screen_id,
    '#weight' => -4,
    '#options' => $options
  );
  return $form;
}

function formulize_admin() {
  //$form = array();
  //$form['formulize_screen']
}

function formulize_view($node, $teaser = FALSE, $page = FALSE) {
  
  ob_start();
	$rootPath = variable_get('formulize_full_path', NULL);
	$lastChar = substr($rootPath, -1);
	if($lastChar != "\\" AND $lastChar != "/") {
		$rootPath .= strstr($rootPath, "/") ? "/" : "\\"; // add the right kind of slash to the end of the path if it has no trailing slash
	}
  require_once $rootPath."mainfile.php";
	// NEED TO ASSIGN THE SCREEN ID FROM THE NODE PROPERTIES, DOESN'T SEEM TO BE IN THE NODE OBJECT BY DEFAULT, SO WE HAVE TO BUILD OR PREPARE THE NODE BEFORE THIS POINT TO ADD IN OUR OWN PROPERTIES?
  $formulize_screen_id = 1;
	// UNCOMMENT THE NEXT LINE AFTER WE'VE GOT THE RIGHT SCREEN ID BEING ASSIGNED FROM THE NODE PROPERTIES
  //include XOOPS_ROOT_PATH . "/modules/formulize/index.php"; 
  $contents = ob_get_clean();
	
  //$node = node_prepare($node, $teaser);
  $node->content['body'] = array(
    '#value' => $contents,
    '#weight' => 1,
  );

  return $node;
  
}

