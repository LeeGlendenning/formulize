<?php
// $Id$

/** 
 * Project:     Formulize: data management rapid application development
 * File:        formulize_og_sync.module 
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 * 
 */ 

/**
 * @file
 * Syncs Organic Groups with Formulize formulize groups.
 */


/**
 * Implementation of hook_help().
 */
function formulize_og_sync_help($section)
{	
    switch ($section) {
    case 'admin/help#formulize_og_sync':
      $output = '<p>'. t('The Formulize OG Sync module ensures synchronization of groups/roles between Drupal and Formulize.') .'</p>';
			$output .= '<ul>';
			$output .= '<li>' . t('Creating new groups in Formulize when groups are created in Organic Groups, including groups for each role created within a group') . '</li>';
			$output .= '<li>' . t('Updating groups in Formulize when groups are updated in Organic Groups, including groups for each role created within a group') . '</li>';
			$output .= '<li>' . t('Deleting groups in Formulize when groups are deleted in Organic Groups, including groups for each role created within a group.') . '</li>';
			$output .= '</ul>';
      $output .= '<p>'. t('For more information please refer to the <a href="!1">Formulize web-site</a> which includes project information, documentation and support resources and more.', array('!1' => 'http://freeformsolutions.ca/en/formulize')) .'</p>';
      return $output;
     case 'admin/modules#description':
         // This description is shown in the listing at admin/modules.
         return t('The Formulize OG Sync module integrates with Formulize and lets you create nodes in your Drupal website that are based on screens defined in Formulize. This module also ensures synchronization of the users and groups/roles between Drupal and Formulize.', array('!1' => '2.0', '!2' => 'http://freeformsolutions.ca/en/formulize/'));
    }
}

/**
 * Valid permissions for this module
 * @return array An array of valid permissions for the formulize module
 */
function formulize_og_sync_perm() {
  return array('administer formulize OG groups');
} 

/**
 * Implementation of hook_menu().
 */
function formulize_og_sync_menu() {
  $items = array();
	
	$items['admin/settings/formulize/og'] = array(
    'title' => 'Settings for Formulize & OG Integration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('formulize_og_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'description' => 'Syncing between Organic Groups and Formulize groups.',
    'type' => MENU_NORMAL_ITEM,
  );
	
		$items['admin/settings/formulize/group-multiplier'] = array(
    'title' => 'Formulize group multiplier',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('formulize_og_multiplier'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'description' => 'Settings for complex Organic groups and Formulize group integration.',
    'type' => MENU_NORMAL_ITEM,
  );
	
	 return $items;
}

/**
 * Menu callback to load settings form.
 */
function formulize_og_settings() {
  // content types
  $is_configured = count(og_get_types('group'));
  if (!$is_configured) {
    form_set_error('formulize_og_settings', t('You must designate at least one content type to act as a group node. <a href="!create">Create new content type</a> if needed.', array('!create' => url('admin/content/types/add', array('query' => drupal_get_destination())))));
  }
	
	$options = array();
  foreach (node_get_types() as $type) {
    $usage = variable_get('og_content_type_usage_'. $type->type, 'omitted');

		if ($usage == 'group') {
    	$options[$type->type] = $type->name;
		}
  }
	
	$form['formulize_og_settings'] = array(
  	'#type' => 'radios',
    '#title' => t('Select the group node that you want to sync with Formulize'),
    '#required' => FALSE,
    '#default_value' => variable_get('formulize_og_group_node_type', NULL),
    '#weight' => 0,
    '#options' => $options
  );
  $form['submit'] = array(
		'#type' => 'submit', 
		'#value' => t('Use group node for Formulize syncing'),
		'#weight' => '5'
	);

  return $form;
}

/**
 * Form submissions handler
 */
function formulize_og_settings_submit($form, &$form_state) {
	
	$form_values = $form_state['values'];

	if ($form_values['submit']) {
		variable_set('formulize_og_group_node_type', $form_values['formulize_og_settings']);
		$message = $form_values['formulize_og_settings'] . t(' set as Formulize group.');
		drupal_set_message($message);
	}
}

/**
 * Get list of OG groups
 */
function _formulize_get_og_list() {}

/**
 * Menu callback for admin/formulize/og/group-multiplier
 */
function formulize_og_multiplier() {
	
  $form['formulize_group']  = array(
    '#type' => 'checkboxes',
    '#title' => t('Choose the groups where you will need special Director and Instructor groups in Formulize'),
    '#description' => t('This version of the module will include two multiplier groups - Director and Instructor, as per the client\'s needs. You choices here will mean there will be three groups in Formulize. E.g. A "Summer Science Camp" group chosen here will create a "Summer Science Camp Directors" group and a "Summer Science Camp Instructor" group as well.'),
		'#options' => _formulize_get_group_list()
  );

	$form['submit'] = array(
		'#type' => 'submit', 
		'#value' => t('Create multiples in Formulize'),
		'#weight' => '5'
	);
	//dsm($form);
	
	return $form;
}

/**
 * Get list of group nodes
 * We want to assign some group nodes as "multipliers" for advanced permissions
 */
function _formulize_get_group_list() {
	
	$formulize_og_group_node_type = variable_get('formulize_og_group_node_type', NULL);
	
	$result = db_query("SELECT * FROM {node} n where n.type = '%s'", $formulize_og_group_node_type);
	
	$group_node_list = array();
	while($row = db_fetch_object($result)) {
		$group_node_list[$row->nid] = $row->title;
	}
	
	if(count($group_node_list) == 0) {
		$message = t('No group nodes found for !group. You need to !create.', array('!group' => $formulize_og_group_node_type, '!create' => l(t('create new content first'),'node/add/' . $formulize_og_group_node_type)));
		drupal_set_message($message);
	}
	
	return $group_node_list;
}

/**
 * Group Multiplier Form validation
 */
function formulize_og_multiplier_validate($form, &$form_state) {
  if ($form_state['values']['nid'] == '') {
    //form_set_error('', t('Do something.'));
  }
}

/**
 * Group Multiplier Form submissions handler
 * 
 * The extra Formulize groups are hard-wired, and there is no checking if the Formulize group already exists.
 * Next to do is also create the Formulize groups based on the translation table.
 */
function formulize_og_multiplier_submit($form, &$form_state) {
	
	$form_values = $form_state['values'];
	
	if ($form_values['submit']) {
		
		dsm($form_values);
		
		$group = array();
		
		foreach($form_values['formulize_group'] as $key => $value) {
				
			if ($value != 0) {
				
				$i = 1;
				$nid = $key;
				$formulize_groupid = $nid;
				$formulize_group_kind = 'main';
				
				while ($i < 4) {
					switch ($i) {
						case 1:
							$formulize_group_kind = 'main';
						break;
						case 2:
							$formulize_group_kind = 'directors';
						break;
						case 3:
							$formulize_group_kind = 'instructors';
						break;
					}
					
					db_query("INSERT INTO {formulize_og_sync} (nid, formulize_groupid, formulize_group_kind) VALUES (%d, %d, '%s')", $nid, $formulize_groupid, $formulize_group_kind);
					$i++;
					$formulize_group_id++;
				}
			}
			$message = $form_values['formulize_og_settings'] . t(' set as Formulize group.');
			drupal_set_message($message);
		}
	}
}

/**
 * Implementation of hook_form_alter().
 */
function formulize_og_sync_form_alter(&$form, $form_state, $form_id) {
	 if($form_id == 'formulize_sync') {
		
			$form['sync_groups'] = array(
		'#type' => 'checkbox',
		'#title' => t('Create groups'),
		'#default_value' => 0,
		'#weight' => '1',
		'#description' => t('Check this when you are ready to create Formulize groups for every existing Drupal Organic Group. After the initial manual sync, for every change to your Drupal group, the changes will automatically propagate to Formulize.'),
		);
		
	 }
}

/**
 * Implementation of hook_nodeapi().
 *
 * Listen for changes to OG
 * hook_nodeapi().
 */
function formulize_og_sync_nodeapi(&$node, $op, $teaser, $page) {

	// only run if OG is enabled
  // check if the node if of type og
  if ( ! og_is_group_type( $node->type ) ) {
      return;
  }

		switch ($op) {
		case 'insert': // $node object should be available
			// get nid and create Fz group if one with same id doesn't already exist
			drupal_set_message(t('A corresponding Fz group has been created'));
			break;
		case 'update':
			break;
		case 'delete':
			break;
    case 'delete revision':
      break;
  	}
}

/**
 * Implementation of hook_og().
 * 
 * When a user is added or removed we do the same to the equivalent group in Formulize.
 */
function formulize_og_sync_og($op, $gid, $uid, $args) {
  switch ($op) {
    case 'user insert':
      $account = user_load(array('uid' => $uid)); // calls up user object. what do we want to store in Fz, just the id?
      _formulize_og_sync_user_create($account, $gid); // take the user object and group node id and add Formulize user to group
      break;
    case 'user delete':
      $account = user_load(array('uid' => $uid));
      _formulize_og_sync_user_delete($account, $gid); // take the user object and group node id and remove Formulize user from group
      break;
    case 'user request':
    case 'user approve':
    case 'admin create':
    case 'admin new':
    case 'user broadcast':
		// not sure if we need to do anything with these triggers
      break;
  }
}

/**
 * Internal function to add a user to Formulize group when added to OG group
 * 
 * @param Object $account
 * The user account object.
 * @param Integer $gid
 * The node ID of the group being subscribed to.
 */
function _formulize_og_sync_user_create($account, $gid) {}

/**
 * Internal function to delete a Formulize group user when removed from OG group
 * 
 * @param Object $account
 * The user account object.
 * @param Integer $gid
 * The node ID of the group being unsubscribed from.
 */
function _formulize_og_sync_user_delete($account, $gid) {}

/**
 * Implementatation of hook_user()
 * 
 * Listen for user changes, additions, deletes and synchronize with Formulize database
 */

function formulize_og_sync_user($op, &$edit, &$account, $category) {
	switch($op) {
		case 'after_update': // if user is modified
      // see if user profile has changed and update
			break;
		case 'insert': //if it's a new user being created
      // check the $edit for uid
						// check if user joined a group and add to Fz group if true
			if (isset($edit['og_register'])) { // if og_register is set then we know 
				foreach (array_keys(array_filter($edit['og_register'])) as $gid) {
				}
			}
			break;        
		case 'delete':
		// delete or de-activate on Fz
		break;
	}
}


/**
 * Implemenation of hook_enable. Called every time module is enabled. Use to synchronise with pre-existing groups
 * @return 
 * 
 * This might be better to require users to confirm Formulize install settings and then create a button for manual syncing of OG groups with Formulize groups.
 * 
 * Need an equivalent for users.
 */
function formulize_og_sync_enable() {

    if ( ! formulize_exist( ) ) { // a module to see if formulize is installed?
        return;
    }
    
    // get OG content types
    $og_types_str = implode("', '", og_get_types('group'));
    //build the query
    $results = db_query("SELECT n.nid FROM {node} n WHERE n.type IN ('%s')", $og_types_str);
    
    while ($result = db_fetch_array($results)) {
        $node = node_load(array('nid' => $result['nid']));
        
        $title  = trim( $node->title );
        $params = array( 'name'        => $title,
                         'title'       => $title,
                         'description' => trim( $node->og_description ),
                         'is_active'   => 1,
                         'og_id'       => $node->nid );
        
        // add the group
				// create a Formulize group for each existing OG group
        
        // add the subscribers
        $subscribers = db_query(og_list_users_sql(1), $node->nid);
        while ($subscriber = db_fetch_array($subscribers)) {
            $uid = $subscriber['uid'];
            $is_admin = $subscriber['is_admin'];
						// add user to the Formulize group if they are part of OG group
						// Example:  civicrm_og_sync_og( 'user update', $node->nid, $uid, array( 'is_admin' => $is_admin, 'is_active' => 1 ) );
        }
    }
}
