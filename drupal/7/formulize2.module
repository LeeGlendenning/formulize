<?php
// $Id$

/** 
 * Project:     Formulize: data management rapid application development
 * File:        formulize.module 
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 * 
 */ 

/**
 * @file
 * Allows users to access to Formulize through Drupal installations.
 */

/**
 * Implementation of hook_help().
 *
 * Throughout Drupal, hook_help() is used to display help text at the top of
 * pages.
 */
function formulize_help($section)
{	
    switch ($section) {
    case 'admin/help#formulize':
      $output = '<p>'. t('The Formulize module integrates with Formulize and lets you create nodes in your Drupal website that are based on screens defined in Formulize. This module also ensures synchronization of the users and groups/roles between Drupal and Formulize.') .'</p>';
      $output .= '<p>' . t('Behaviours this module supports:') . '</p>';
      $output .= '<ul>';
			$output .= '<li>' . t('Storing the location of Formulize') . '</li>';
			$output .= '<li>' . t('Displaying data management screens from Formulize, inside Drupal') . '</li>';
			$output .= '<li>' . t('Automatically synchronizing users with Drupal') . '</li>';
			$output .= '<li>' . t('With the Formulize Organic Groups Synchronization module, automatically synchronizing Drupal organic groups with Formulize groups') . '</li>';
			$output .= '<li>' . t('With the Formulize Roles Synchronization module, automatically synchronizing Drupal roles with Formulize groups') . '</li>';
      $output .= '</ul>';
      $output .= '<p>'. t('For more information please refer to the <a href="!1">Formulize website</a> which includes project information, support forum, documentation, and more.', array('!1' => 'http://freeformsolutions.ca/formulize')) .'</p>';
      return $output;
     case 'admin/modules#description':
         // This description is shown in the listing at admin/modules.
         return t('The Formulize module (Formulize !1) integrates with Formulize and lets you create nodes in your Drupal website that are based on screens defined in <a href="!2">Formulize</a>. This module also ensures synchronization of the users and groups/roles between Drupal and Formulize.', array('!1' => '1.0', '!2' => 'http://freeformsolutions.ca/formulize/'));
			case 'admin/settings/formulize':
      	// This description is shown on the main Formulize page.
      	return t('The settings for the Formulize module allow you to tell Drupal where Formulize is.  So you must have already installed Formulize in your website.  Once you have, then you can tell Drupal the full path to Formulize so Drupal can display Formulize content inside your website, and synchronize users and groups/roles.');
			case 'admin/settings/formulize/path':
      	// This description is shown on the Formulize path.
      	return t('Define the full path to the Formulize mainfile.php.');
    }
}

/**
 * Implementation of hook_perm()
 * @return array An array of valid permissions for the formulize module
 * --+MedievalSpawn Drupal7 Update+-- Implemented hook_permission() instead
 */
function formulize_permission() {
  return array('create form content' => array('title' => t('Create Form content')), 'edit own form content' => array('title' => t('Edit own Form content')), 'edit any form content' => array('title' => t('Edit any Form content')), 'access form content' => array('title' => t('Access Form content')), 'delete own form content' => array('title' => t('Delete own Form Content')),
   'delete any form content' => array('title' => t('Delete any Form content')));
} 

/**
 * Implementation of hook_access()
 * --+MedievalSpawn Drupal7 Update+-- Implemented hook_node_access() instead
 */
function formulize_node_access($op, $node, $account) {
  if ($op == 'create') {
    return user_access('create form content', $account);
  }

  if ($op == 'update') {
    if (user_access('edit any form content', $account) || (user_access('edit own form content', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }

  if ($op == 'delete') {
    if (user_access('delete any form content', $account) || (user_access('delete own form content', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }

	if ($op == 'view') {
		return user_access('access form content', $account);
	}
}


/**
 * Implementation of hook_menu().
 */
function formulize_menu() {
  $items = array();

  // Admin user pages
  $items['admin/settings/formulize'] = array(
    'title' => 'Formulize',
    'description' => 'Setting up integration with Formulize.',
    'position' => 'left',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  // Admin Settings.
  $items['admin/settings/formulize/path'] = array(
    'title' => 'Formulize Path',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('formulize_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
		'weight' => -5,
    'description' => 'Global configuration of Formulize functionality.',
    'type' => MENU_NORMAL_ITEM,
  );
	
	
	$items['admin/settings/formulize/sync'] = array(
    'title' => 'Formulize Synchronizing',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('formulize_sync'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
		'weight' => -3,
    'description' => 'Synchronizing between Drupal and Formulize.',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Menu callback for admin/formulize/settings.
 */
function formulize_admin_settings() {

  $form['formulize_full_path']  = array(
    '#type' => 'textfield',
    '#title' => t('Formulize full path'),
    '#default_value' => variable_get('formulize_full_path', NULL),
    '#description' => t('The full path to the mainfile.php file of your Formulize installation. For instance, "/var/www/mysite.com/formulize/mainfile.php"'),
  );

	$form = system_settings_form($form);
	
	return $form;
}

/**
 * Menu callback for admin/formulize/settings.
 */
function formulize_sync() {

	$form['sync_users'] = array(
		'#type' => 'checkbox',
		'#title' => t('Create users'),
		'#default_value' => 0,
		'#weight' => '0',
		'#description' => t('Check this when you are ready to create Formulize users for every existing Drupal user. After the initial manual sync, for every change to your Drupal users, the changes will automatically propagate to Formulize.'),
		);
		
	$form['hidden'] = array('#type' => 'value', '#value' => 'is_it_here');
  $form['submit'] = array(
		'#type' => 'submit', 
		'#value' => t('Synchronize with Formulize'),
		'#weight' => '5'
	);
	
	return $form;
}

/**
 * Form submissions handler
 */
function formulize_sync_submit($form, &$form_state) {
	$form_values = $form_state['values'];
	// take the submission and do the syncing
	// check for conditions of syncing users
	if ($form_values['submit']) {
		global $user;

		if($form_values['sync_users']) {
			_formulize_sync_users( );
			drupal_set_message(t('Users have been synchronized with Formulize.'));
		}

	}
}

/**
 * Implementation of hook_node_info()
 * Defines the Formulize node type so that Drupal knows that such a node type exists and will let people create nodes of that type
 */
function formulize_node_info() {
  return array(
    'formulize' => array(
      'name' => t('Form'),
      'base' => 'formulize',
      'description' => t('Formulize is a data management and reporting system.  You can embed data management applications inside Drupal, once you have configured them in Formulize.  See the <a href="/admin/settings/formulize"></a>admin settings</a> for more information.'),
			'has_title' => TRUE,
			'title_label' => ('Screen Name')
    )
  );
}

/**
 * Implementation of hook_form()
 * Defines the custom fields for the editing form for the Formulize node type
 * --+MedievalSpawn Drupal7 Update+-- Implemented node_type_get_type() instead of node_get_types()
 */
function formulize_form(&$node, &$form_state) {
  $type = node_type_get_type($node); 
	
        $form['title'] = array(
    	'#type' => 'textfield',
    	'#title' => check_plain($type->title_label),
    	'#required' => TRUE,
    	'#default_value' => $node->title,
    	'#weight' => -5
  	);
	
		
  $form['screen_id'] = array(
    '#type' => 'select',
    '#title' => t('Select the Formulize screen that you want to embed in this node'),
    '#required' => TRUE,
    '#default_value' => isset($node->screen_id) ? $node->screen_id : '0',
    '#weight' => -4,
    '#options' => _formulize_get_screens()
  );

  return $form;
}

/**
 * Internal function
 * 
 * Get screens
 */
function _formulize_get_screens () {

    
	$formulize_db = _formulize_get_connection();
    
	
	$options = array();
		
                $options[0] = variable_get('formulize_full_path', NULL);
                $options[1] = $formulize_db;
		drupal_set_message(t('No screens found at this time.'));
	
	
	return $options;
}

/**
 * Internal function to establish formulize database connection
 * 
 */
function _formulize_get_connection() {

  static $formulize_connection;

  if(!isset($formulize_connection)) {
		$formulize_path = variable_get('formulize_full_path', NULL);
		require_once 'C:/Apache24/htdocs/servicecenter/mainfile.php';
		$formulize_connection = $xoopsDB;
  }
  return $formulize_connection;
}

/**
 * Implementation of hook_validate().
 *
 * Errors should be signaled with form_set_error().
 */

function formulize_validate(&$node) {
  if ($node->screen_id) {
    if (!is_numeric($node->screen_id)) {
      form_set_error('screen_id', t('The screen id must be a number.'));
    }
  }
  else {
    // Let an empty field mean "zero."
    $node->screen_id = 0;
  }
}

/**
 * Implementation of hook_insert().
 *
 * As a new node is being inserted into the database, we need to do our own
 * database inserts.
 */
function formulize_insert($node) {
  db_query("INSERT INTO {formulize} (vid, nid, screen_id) VALUES (%d, %d, %d)", $node->vid, $node->nid, $node->screen_id);
}

/**
 * Implementation of hook_update().
 *
 * As an existing node is being updated in the database, we need to do our own
 * database updates.
 */
function formulize_update($node) {
  // if this is a new node or we're adding a new revision,
  if ($node->revision) {
    formulize_insert($node);
  }
  else {
    db_query("UPDATE {formulize} SET screen_id = %d WHERE vid = %d", $node->screen_id, $node->vid);
  }
}

/**
 * Implementation of hook_nodeapi().
 *
 * When a node revision is deleted, we need to remove the corresponding record
 * from our table. The only way to handle revision deletion is by implementing
 * hook_nodeapi().
 * --+MedievalSpawn Drupal7 Update+-- Implemented hook_node_revision_delete() instead
 */
function formulize_node_revision_delete(&$node) {
      //Notice that we're matching a single revision based on the node's vid.
      db_query('DELETE FROM {formulize} WHERE vid = %d', $node->vid);
}

/**
 * Implementation of hook_delete().
 *
 * When a node is deleted, we need to remove all related records from out table.
 */
function formulize_delete($node) {
  // Notice that we're matching all revision, by using the node's nid.
  db_query('DELETE FROM {formulize} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_load().
 *
 * Now that we've defined how to manage the node data in the database, we
 * need to tell Drupal how to get the node back out. This hook is called
 * every time a node is loaded, and allows us to do some loading of our own.
 */
function formulize_load($node) {
  $additions = db_fetch_object(db_query('SELECT screen_id FROM {formulize} WHERE vid = %d', $node->vid));
  return $additions;
}

/**
 * Implementation of hook_view().
 * 
 * Runs the node text through output filters.
 */
function formulize_view(&$node, $teaser = FALSE, $page = FALSE) {
	
		//sconnect to Formulize session
	$formulize_path = variable_get('formulize_full_path', NULL);
	require_once($formulize_path);
	
	ob_start(); // start capturing output from Formulize screens
	
	$formulize_screen_id = $node->screen_id;
	
	include XOOPS_ROOT_PATH . '/modules/formulize/index.php'; 

  $output = ob_get_clean();
	
  $node = node_prepare($node, $teaser); // get it ready for display
  $node->content['formulize_screen'] = array(
    '#value' => theme('formulize_display_screen', $output),
    '#weight' => 0,
  );

  return $node;
}

/*
 * Implement hook_theme()
 */
function formulize_theme() {
  return array(
    'formulize_display_screen' => array(
      'arguments' => array('formulize_screen_output' => NULL)
		)
  );
}

/**
 * Theme a Formulize screen
 *
 * @param $fz_screen
 * The screen as an html dump.
 * @return
 * An HTML themed string.
 */

function theme_formulize_display_screen($formulize_screen_output) {
	
	$module_path = drupal_get_path('module', 'formulize');
	$full_path = $module_path .'/formulize.css';
	drupal_add_css($full_path);

	$output = '<div id="formulize-screen">';
	$output .= $formulize_screen_output;
	$output .= '</div>';

	return $output;
}


/**
 * Implementatation of hook_user()
 * 
 * Listen for user changes, additions, deletes and synchronize with Formulize database
 * --+MedievalSpawn Drupal7 Update+-- Implemented hook_user_$action() instead
function formulize_user($op, &$edit, &$account, $category) {
	switch($op) {
		case 'after_update': // if user is modified
			_formulize_update_user( $account );
			break;
		case 'insert': // if it's a new user being created
			_formulize_insert_user( $account );
			break;        
		case 'delete': // if a user is being deleted
			_formulize_delete_user( $account );
		break;
	}
}
*/

function formulize_user_presave(&$edit, &$account, $category) {
_formulize_update_user ($account);
}


function formulize_user_insert(&$edit, &$account, $category) {
_formulize_insert_user ($account);
}

function formulize_user_delete(&$edit, &$account, $category) {
_formulize_delete_user ($account);
}


/**
 * Check that Formulize is installed and working
 */
function formulize_exist() { return TRUE;}

/**
 * Sync Drupal users with Formulize
 */
function _formulize_sync_users( )
{
	$result = db_query("SELECT u.uid FROM {users} u WHERE u.status = 1 AND u.uid > 1 ORDER BY u.uid");
	foreach ($result as $record) {
		_formulize_insert_user(user_load($record->uid));
	}
}

/**
 * Insert a Drupal user into Formulize
 */
function _formulize_insert_user( $drupal_user )
{
	$db = _formulize_get_connection();

	$member_handler =& xoops_gethandler('member');

  $xoops_user = $member_handler->createUser();
	$xoops_user->setVar('uid',$drupal_user->uid);
	$xoops_user->setVar('uname',$drupal_user->name);
	$xoops_user->setVar('name',$drupal_user->name);
	$xoops_user->setVar('pass',$drupal_user->pass);
	$xoops_user->setVar('email',$drupal_user->mail);
	$xoops_user->setVar('timezone_offset',$drupal_user->timezone/60/60);
	$xoops_user->setVar('language',_formulize_convert_language($drupal_user->language));

	$xoops_user->setVar('user_avatar','blank.gif');
	$xoops_user->setVar('theme','impresstheme');
	$xoops_user->setVar('level',1);

	// Normally you would use: $member_handler->insertUser( $xoops_user );
	// We recreate some of the functionaly from kernel/user.php::insertUser because we do
	// not want XOOPS to generate an ID, it is supplied by Drupal

	$sql = sprintf("INSERT INTO %s (uid, uname, name, email, url, user_avatar, user_regdate, user_icq, user_from, user_sig, user_viewemail, actkey, user_aim, user_yim, user_msnm, pass, posts, attachsig, rank, level, theme, timezone_offset, last_login, umode, uorder, notify_method, notify_mode, user_occ, bio, user_intrest, user_mailok, language, openid, salt, user_viewoid, pass_expired, enc_type) VALUES ('%u', %s, %s, %s, %s, %s, '%u', %s, %s, %s, '%u', %s, %s, %s, %s, %s, '%u', '%u', '%u', '%u', %s, %s, '%u', %s, '%u', '%u', '%u', %s, %s, %s, '%u', %s, %s, %s, '%u', '%u', '%u')",
		$db->prefix('users'), intval($xoops_user->getVar('uid')),
		$db->quoteString($xoops_user->getVar('uname')), $db->quoteString($xoops_user->getVar('name')),
		$db->quoteString($xoops_user->getVar('email')), $db->quoteString($xoops_user->getVar('url')),
                //* --+MedievalSpawn Drupal7 Update+-- Implemented REQUEST_TIME instead of Time()
		$db->quoteString($xoops_user->getVar('user_avatar')), REQUEST_TIME,
		$db->quoteString($xoops_user->getVar('user_icq')), $db->quoteString($xoops_user->getVar('user_from')),
		$db->quoteString($xoops_user->getVar('user_sig')), intval($xoops_user->getVar('user_viewemail')),
		$db->quoteString($xoops_user->getVar('actkey')), $db->quoteString($xoops_user->getVar('user_aim')),
		$db->quoteString($xoops_user->getVar('user_yim')), $db->quoteString($xoops_user->getVar('user_msnm')),
		$db->quoteString($xoops_user->getVar('pass')), intval($xoops_user->getVar('posts')),
		intval($xoops_user->getVar('attachsig')), intval($xoops_user->getVar('rank')),
		intval($xoops_user->getVar('level')), $db->quoteString($xoops_user->getVar('theme')),
		$db->quoteString(floatval($xoops_user->getVar('timezone_offset'))), 0,
		$db->quoteString($xoops_user->getVar('umode')), intval($xoops_user->getVar('uorder')),
		intval($xoops_user->getVar('notify_method')), intval($xoops_user->getVar('notify_mode')),
		$db->quoteString($xoops_user->getVar('user_occ')), $db->quoteString($xoops_user->getVar('bio')),
		$db->quoteString($xoops_user->getVar('user_intrest')), intval($xoops_user->getVar('user_mailok')),
		$db->quoteString($xoops_user->getVar('language')), $db->quoteString($xoops_user->getVar('openid')),
		$db->quoteString($xoops_user->getVar('salt')), intval($xoops_user->getVar('user_viewoid')),
		intval($xoops_user->getVar('pass_expired')), intval($xoops_user->getVar('enc_type')));

	$db->query($sql);

	// 2 constant is the Registered Users Group
	$member_handler->addUserToGroup(2,$xoops_user->getVar('uid'));
}

/**
 * When a Drupal user changes, update in XOOPS
 */
function _formulize_update_user( $drupal_user )
{
	$db = _formulize_get_connection();

	$member_handler =& xoops_gethandler('member');

  $xoops_user = $member_handler->getUser($drupal_user->uid);
	$xoops_user->setVar('uname',$drupal_user->name);
	$xoops_user->setVar('name',$drupal_user->name);
	$xoops_user->setVar('pass',$drupal_user->pass);
	$xoops_user->setVar('email',$drupal_user->mail);
	$xoops_user->setVar('timezone_offset',$drupal_user->timezone/60/60);
	$xoops_user->setVar('language',_formulize_convert_language($drupal_user->language));

	$member_handler->insertUser( $xoops_user );
}

/**
 * When a Drupal user is removed, delete in XOOPS
 */
function _formulize_delete_user( $drupal_user )
{
	$db = _formulize_get_connection();

	$member_handler =& xoops_gethandler('member');

  $xoops_user = $member_handler->getUser($drupal_user->uid);

	$member_handler->deleteUser( $xoops_user );
}

/**
 * Convert language format of Drupal to XOOPS
 */
function _formulize_convert_language( $drupal_user )
{
	$languages = array('en'=>'english','fr'=>'french');

	if(array_key_exists($drupal_user,$languages))
		return $languages[$drupal_user];

	return 'english';
}
